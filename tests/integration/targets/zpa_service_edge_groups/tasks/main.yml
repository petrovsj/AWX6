---
- name: Include default variables
  ansible.builtin.include_vars:
    file: "../defaults/main.yml"

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: "../../../generate_random_string.yml"

- ansible.builtin.set_fact:
    seg_name: "{{ name }}_{{ random_string }}"
    seg_description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  fail:
    msg: "{{ item }} is not defined as environment variable"
  when: lookup('env', item) is none
  loop:
    - ZPA_CLIENT_ID
    - ZPA_CLIENT_SECRET
    - ZPA_CUSTOMER_ID

- ansible.builtin.set_fact:
    zpa_cloud:
      client_id: "{{ lookup('env', 'ZPA_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZPA_CLIENT_SECRET') }}"
      customer_id: "{{ lookup('env', 'ZPA_CUSTOMER_ID') }}"
      cloud: "{{ lookup('env', 'ZPA_CLOUD') | default(omit) }}"
  no_log: True

- block:
    - name: Ensure Service Edge Group is absent (leftover)
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ seg_name }}"
      register: result

    - name: Ensure Service Edge Group is absent
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ seg_name }}"
      register: result

    - name: Verify Service Edge Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Service Edge Group is (Present)
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: present
        name: "{{ seg_name }}"
        description: "{{ seg_description }}"
        enabled: "{{ enabled }}"
        city_country: "{{ city_country }}"
        country_code: "{{ country_code }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
        location: "{{ location }}"
        is_public: "{{ is_public }}"
        upgrade_day: "{{ upgrade_day }}"
        upgrade_time_in_secs: "{{ upgrade_time_in_secs }}"
        override_version_profile: "{{ override_version_profile }}"
        version_profile_id: "{{ version_profile_id }}"
      register: result

    - name: Verify Service Edge Group is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined
          - result.data.name == seg_name
          - result.data.enabled == true

    - name: Create the Service Edge Group (again; idempotency check)
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: present
        name: "{{ seg_name }}"
        description: "{{ seg_description }}"
        enabled: "{{ enabled }}"
        city_country: "{{ city_country }}"
        country_code: "{{ country_code }}"
        latitude: "{{ latitude }}"
        longitude: "{{ longitude }}"
        location: "{{ location }}"
        is_public: "{{ is_public }}"
        upgrade_day: "{{ upgrade_day }}"
        upgrade_time_in_secs: "{{ upgrade_time_in_secs }}"
        override_version_profile: "{{ override_version_profile }}"
        version_profile_id: "{{ version_profile_id }}"
      register: result

    - name: Ensure Service Edge Group is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Fetch all Service Edge Groups
      zscaler.zpacloud.zpa_service_edge_groups_facts:
        provider: "{{ zpa_cloud }}"
      register: result

    - name: Ensure all Service Edge Groups found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined

    - name: Fetch this Service Edge Group
      zscaler.zpacloud.zpa_service_edge_groups_facts:
        provider: "{{ zpa_cloud }}"
        name: "{{ seg_name }}"
      register: result

    - name: Ensure this Service Edge Group is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data[0].name is defined
          - result.data[0].name == seg_name
          - result.data[0].enabled == true

    - name: Delete Service Edge Group
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ seg_name }}"
      register: result

    - name: Verify Service Edge Group is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Service Edge Group (again; idempotency check)
      zscaler.zpacloud.zpa_service_edge_groups:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ seg_name }}"
      register: result

    - name: Verify Service Edge Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
