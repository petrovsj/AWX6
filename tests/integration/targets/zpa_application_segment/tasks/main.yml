---
- block:
    - name: Ensure ZPA API Credential is Set
      ansible.builtin.fail:
        msg: client_id, client_secret and customer_id should be defined in tests/integration/integration_config.yml
      when:
        - client_id is not defined
        - client_secret is not defined
        - customer_id  is not defined
        - client_id | length == 0
        - client_secret | length == 0
        - customer_id | length == 0
    - name: Ensure Application Segment is absent (leftover)
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "216196257331291896"
        server_groups:
          - id: "216196257331291969"
      ignore_errors: true # In case one was left from previous run
      register: result
    - name: Ensure Application Segment is absent
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "216196257331291896"
        server_groups:
          - id: "216196257331291969"
      ignore_errors: true # In case one was left from previous run
      register: result
    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed
    - name: Create a segment group
      zscaler.zpacloud.zpa_segment_group:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        config_space: "DEFAULT"
        name: Dummy Application group for integration test
        description: Dummy Application group for integration test
        enabled: true
        policy_migrated: true
        tcp_keep_alive_enabled: "1"
      register: segment_group
    - name: Verify Application Segment group is created
      ansible.builtin.assert:
        that:
          - segment_group.data
          - segment_group.data.name is defined
          - segment_group.data.id is defined
          - segment_group.data.enabled is true
    - name: Create the App Connector Group
      zscaler.zpacloud.zpa_app_connector_groups:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "Dummy Application connector group for integration test"
        description: "Dummy Application connector group for integration test"
        enabled: true
        city_country: California, US
        country_code: US
        latitude: 37.3382082
        longitude: -121.8863286
        location: San Jose, CA, USA
        upgrade_day: SUNDAY
        upgrade_time_in_secs: 66600
        override_version_profile: true
        version_profile_id: "1"
        dns_query_type: "IPV4"
      register: app_connector_group
    - name: Verify Application connector group is created
      ansible.builtin.assert:
        that:
          - app_connector_group.data
          - app_connector_group.data.name is defined
          - app_connector_group.data.id is defined
          - app_connector_group.data.enabled is true
    - name: Create a server group
      zscaler.zpacloud.zpa_server_group:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "Dummy server group for integration test"
        description: "Dummy server group for integration test"
        enabled: true
        dynamic_discovery: true
        app_connector_groups:
          - id: "{{app_connector_group.data.id}}"
      register: server_group
    - name: Verify Server group is created
      ansible.builtin.assert:
        that:
          - server_group.data
          - server_group.data.name is defined
          - server_group.data.id is defined
          - server_group.data.enabled is true
    # Create Application Segments (Present)
    - name: Ensure Application Segment is (Present)
      zscaler.zpacloud.zpa_application_segment:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group.data.id }}"
        server_groups:
          - id: "{{ server_group.data.id }}"
      register: result
    - name: Verify Application Segment is present
      ansible.builtin.assert:
        that:
          - result.data
          - result.data.name is defined
          - result.data.enabled is true
    - name: Create the Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment:
        state: present
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group.data.id }}"
        server_groups:
          - id: "{{ server_group.data.id }}"
      register: result
    - name: Verify Application Segment is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - result.changed
    - name: Fetch all Application Segments
      zscaler.zpacloud.zpa_application_segment_info:
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
      register: result
    - name: Ensure all Application Segments found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined
    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5
    - name: Delete Application Segment
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group.data.id }}"
        server_groups:
          - id: "{{ server_group.data.id }}"
      register: result
    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - result.changed
    - name: Delete Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{ name }}"
        description: "{{ description }}"
        enabled: "{{ enabled }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group.data.id }}"
        server_groups:
          - id: "{{ server_group.data.id }}"
      register: result
    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed
    - name: Delete Segment Group
      zscaler.zpacloud.zpa_segment_group:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        config_space: "DEFAULT"
        name: "{{ segment_group.data.name }}"
        description: Dummy Application group for integration test
        enabled: true
        policy_migrated: true
        tcp_keep_alive_enabled: "1"
        id: "{{ segment_group.data.id }}"
      register: result
    - name: Verify Segment Group is absent
      ansible.builtin.assert:
        that:
          - result.changed
    - name: Delete Server Group
      zscaler.zpacloud.zpa_server_group:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "Dummy server group for integration test"
        description: "Dummy server group for integration test"
        enabled: true
        dynamic_discovery: true
        id: "{{ server_group.data.id }}"
        app_connector_groups:
          - id: "{{app_connector_group.data.id}}"
      register: result
    - name: Verify Server Group is absent
      ansible.builtin.assert:
        that:
          - result.changed
    - name: Delete App connector Group
      zscaler.zpacloud.zpa_app_connector_groups:
        state: absent
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        customer_id: "{{ customer_id }}"
        name: "{{app_connector_group.data.name}}"
        id: "{{app_connector_group.data.id}}"
        description: "Dummy Application connector group for integration test"
        enabled: true
        city_country: California, US
        country_code: US
        latitude: 37.3382082
        longitude: -121.8863286
        location: San Jose, CA, USA
        upgrade_day: SUNDAY
        upgrade_time_in_secs: 66600
        override_version_profile: true
        version_profile_id: "1"
        dns_query_type: "IPV4"
      register: result
    - name: Verify App connector Group is absent
      ansible.builtin.assert:
        that:
          - result.changed
