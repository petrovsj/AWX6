- name: Include default variables
  ansible.builtin.include_vars:
    file: "../defaults/main.yml"

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: "../../../generate_random_string.yml"

- name: Create segment group
  ansible.builtin.include_tasks: "../../../helper_tasks/zpa_segment_group/create_segment_group.yml"

- name: Verify segment group
  ansible.builtin.include_tasks: "../../../helper_tasks/zpa_segment_group/verify_segment_group.yml"

- name: Create server group
  ansible.builtin.include_tasks: "../../../helper_tasks/zpa_server_group/create_server_group.yml"

- name: Verify server group
  ansible.builtin.include_tasks: "../../../helper_tasks/zpa_server_group/verify_server_group.yml"

- name: Import Certificate ID
  ansible.builtin.include_tasks: "../../../helper_tasks/zpa_ba_certificate_facts/zpa_ba_certificate_facts.yml"

- ansible.builtin.set_fact:
    appended_name: "{{ name }}_{{ random_string }}"
    appended_description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  fail:
    msg: "{{ item }} is not defined as environment variable"
  when: lookup('env', item) is none
  loop:
    - ZPA_CLIENT_ID
    - ZPA_CLIENT_SECRET
    - ZPA_CUSTOMER_ID

- ansible.builtin.set_fact:
    zpa_cloud:
      client_id: "{{ lookup('env', 'ZPA_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZPA_CLIENT_SECRET') }}"
      customer_id: "{{ lookup('env', 'ZPA_CUSTOMER_ID') }}"
      cloud: "{{ lookup('env', 'ZPA_CLOUD') | default(omit) }}"
  no_log: True

- block:
    - name: Ensure Browser Access Application Segment is absent (leftover)
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Ensure Browser Access Application Segment is absent
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    # Create Browser Access Application Segments (Present)
    - name: Ensure Browser Access Application Segment is (Present)
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Debug - Show appended_name
      debug:
        var: appended_name

    - name: Debug - Show result.data
      debug:
        var: result.data

    - name: Verify Browser Access Application Segment is present
      ansible.builtin.assert:
        that:
          - result is defined
          - result.data is defined and result.data is not none and result.data | length > 0
          - "result.data[0].name is defined and result.data[0].name == appended_name"
          - "result.data[0].enabled is defined and result.data[0].enabled"
        fail_msg: "Expected segment is not present or doesn't match the expected state."

    - name: Create the Browser Access Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Browser Access Application Segment is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Browser Access Application Segments
      zscaler.zpacloud.zpa_application_segment_browser_access_facts:
        provider: "{{ zpa_cloud }}"
      register: result
    - name: Ensure all Browser Access Application Segments found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined

    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Browser Access Application Segment
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Browser Access Application Segment is absent
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Browser Access Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment_browser_access:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        adp_enabled: "{{ adp_enabled }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        clientless_app_ids:
          - name: "{{ clientless_app_ids[0].name }}"
            application_protocol: "{{ clientless_app_ids[0].application_protocol }}"
            application_port: "{{ clientless_app_ids[0].application_port }}"
            certificate_id: "{{ ba_certificate }}"
            trust_untrusted_cert: "{{ clientless_app_ids[0].trust_untrusted_cert }}"
            enabled: "{{ clientless_app_ids[0].enabled }}"
            domain: "{{ clientless_app_ids[0].domain }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Browser Access Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed

- name: Clean up segment group
  include_tasks: "../../../helper_tasks/zpa_segment_group/delete_segment_group.yml"

- name: Clean up server group
  include_tasks: "../../../helper_tasks/zpa_server_group/delete_server_group.yml"

- name: Clean up App Connector group
  include_tasks: "../../../helper_tasks/zpa_app_connector_group/delete_app_connector_group.yml"
