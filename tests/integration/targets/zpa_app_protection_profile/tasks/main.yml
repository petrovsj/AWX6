---
- name: Include default variables
  ansible.builtin.include_vars:
    file: "../defaults/main.yml"

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: "../../../generate_random_string.yml"

- ansible.builtin.set_fact:
    appended_name: "{{ name }}_{{ random_string }}"
    appended_description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZPA_CLIENT_ID
    - ZPA_CLIENT_SECRET
    - ZPA_CUSTOMER_ID
  loop_control:
    loop_var: env_var

- ansible.builtin.set_fact:
    zpa_cloud:
      client_id: "{{ lookup('env', 'ZPA_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZPA_CLIENT_SECRET') }}"
      customer_id: "{{ lookup('env', 'ZPA_CUSTOMER_ID') }}"
      cloud: "{{ lookup('env', 'ZPA_CLOUD') | default(omit) }}"
  no_log: True

- block:
    - name: Ensure App Protection Profile is absent (leftover)
      zscaler.zpacloud.zpa_app_protection_security_profile:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ appended_name }}"
      register: result

    - name: Ensure App Protection Profile is absent
      zscaler.zpacloud.zpa_app_protection_security_profile:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        paranoia_level: "{{ paranoia_level }}"
        check_control_deployment_status: "{{ check_control_deployment_status }}"
        predef_controls_version: "{{ predef_controls_version }}"
        incarnation_number: "{{ incarnation_number }}"
        controls_facts: "{{ controls_facts }}"
        global_control_actions: "{{ global_control_actions }}"
      register: result

    - name: Verify App Protection Profile is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    # Create App Protection Profile (Present)
    - name: Ensure App Protection Profile is (Present)
      zscaler.zpacloud.zpa_app_protection_security_profile:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        paranoia_level: "{{ paranoia_level }}"
        check_control_deployment_status: "{{ check_control_deployment_status }}"
        predef_controls_version: "{{ predef_controls_version }}"
        incarnation_number: "{{ incarnation_number }}"
        controls_facts: "{{ controls_facts }}"
        global_control_actions: "{{ global_control_actions }}"

      register: result

    - name: Verify App Protection Profile is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined
          - result.data.name == appended_name

    - name: Create the App Protection Profile (again; idempotency check)
      zscaler.zpacloud.zpa_app_protection_security_profile:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        paranoia_level: "{{ paranoia_level }}"
        check_control_deployment_status: "{{ check_control_deployment_status }}"
        predef_controls_version: "{{ predef_controls_version }}"
        incarnation_number: "{{ incarnation_number }}"
        controls_facts: "{{ controls_facts }}"
        global_control_actions: "{{ global_control_actions }}"

      register: result

    - name: Verify App Protection Profile is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all App Protection Profile
      zscaler.zpacloud.zpa_app_protection_security_profile_facts:
        provider: "{{ zpa_cloud }}"
      register: result

    - name: Ensure all App Protection Profiles are found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined

    - name: Fetch this App Protection Profiles
      zscaler.zpacloud.zpa_app_protection_security_profile_facts:
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Ensure this App Protection Profiles is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data[0].name is defined
          - result.data[0].name == appended_name

    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete App Protection Profile
      zscaler.zpacloud.zpa_app_protection_security_profile:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Verify App Protection Profile is absent
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete App Protection Profile (again; idempotency check)
      zscaler.zpacloud.zpa_app_protection_security_profile:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Verify App Protection Profile is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
